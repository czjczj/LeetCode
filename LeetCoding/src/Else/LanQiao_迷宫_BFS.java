package Else;
import java.util.PriorityQueue;
import java.util.Queue;

/**
 * @author czj
 * @date   2019-03-25 11:57
 * 
00001000100000101010010000100000001001100110100101
01000000001010100011010000101000001010101011001011
11001000110101000010101100011010011010101011110111
10100000101000100110101010111110011000010000111010
11000110100001110010001001010101010101010001101000
11100100101001001000010000010101010100100100010100
10101010011100001000011000010110011110110100001000
10000000101100010000101100101101001011100000000100
00101001010101101001010100011010101101110000110101
00001000110000110101101000000100101001001000011101
00101000010000110101010000100010001001000100010101
00000100101000000110010100101001000001000000000010
00000110100010001000100000001000011101000000110011
10000010100101001010110000000100101010001011101000
10000001100111010111010001000110111010101101111000
 */
public class LanQiao_迷宫_BFS {
	static int[] dix = {1,0,0,-1};
	static int[] diy = {0,-1,1,0};
	public static void main(String[] args) {
//		char[][] c = {
//				{'0','1','0','0','0','0'},
//				{'0','0','0','1','0','0'},
//				{'0','0','1','0','0','1'},
//				{'1','1','0','0','0','0'}
//		};
		String[] s = {
				"01010101001011001001010110010110100100001000101010",
				"00001000100000101010010000100000001001100110100101",
				"01111011010010001000001101001011100011000000010000",
				"01000000001010100011010000101000001010101011001011",
				"00011111000000101000010010100010100000101100000000",
				"11001000110101000010101100011010011010101011110111",
				"00011011010101001001001010000001000101001110000000",
				"10100000101000100110101010111110011000010000111010",
				"00111000001010100001100010000001000101001100001001",
				"11000110100001110010001001010101010101010001101000",
				"00010000100100000101001010101110100010101010000101",
				"11100100101001001000010000010101010100100100010100",
				"00000010000000101011001111010001100000101010100011",
				"10101010011100001000011000010110011110110100001000",
				"10101010100001101010100101000010100000111011101001",
				"10000000101100010000101100101101001011100000000100",
				"10101001000000010100100001000100000100011110101001",
				"00101001010101101001010100011010101101110000110101",
				"11001010000100001100000010100101000001000111000010",
				"00001000110000110101101000000100101001001000011101",
				"10100101000101000000001110110010110101101010100001",
				"00101000010000110101010000100010001001000100010101",
				"10100001000110010001000010101001010101011111010010",
				"00000100101000000110010100101001000001000000000010",
				"11010000001001110111001001000011101001011011101000",
				"00000110100010001000100000001000011101000000110011",
				"10101000101000100010001111100010101001010000001000",
				"10000010100101001010110000000100101010001011101000",
				"00111100001000010000000110111000000001000000001011",
				"10000001100111010111010001000110111010101101111000"
		};
		char[][] c = new char[s.length][s[0].toCharArray().length];
		for (int i = 0; i < c.length; i++) {
			c[i] = s[i].toCharArray();
		}
//		for (int i = 0; i < c.length; i++) {
//			for (int j = 0; j < c[i].length; j++) {
//				System.out.print(c[i][j]+" ");
//			}
//			System.out.println();
//		}
		int m = c.length;
		int n = c[0].length;
		System.out.println(m+" "+n);
		boolean[][] isVis = new boolean[m][n];
		Queue<State> q = new PriorityQueue<>();
		q.add(new State(0, 0, "",0));
		isVis[0][0] = true;
		while(!q.isEmpty()) {
			State p = q.poll();
			int x = p.x;
			int y = p.y;
			int step = p.step;
			if(x==m-1 && y==n-1) {
				System.out.println(step);
				System.out.println(p.s);
				break;
			}
			for (int i = 0; i < dix.length; i++) {
				int nx = x+dix[i];
				int ny = y+diy[i];
				if(nx<0||nx>=m||ny<0||ny>=n||c[nx][ny]=='1'||isVis[nx][ny])
					continue;
				if(i==0) {
					q.add(new State(nx, ny, p.s+"D", step+1));
				}else if(i==1) {
					q.add(new State(nx, ny, p.s+"L", step+1));
				}else if(i==2) {
					q.add(new State(nx, ny, p.s+"R", step+1));
				}else {
					q.add(new State(nx, ny, p.s+"U", step+1));
				}
				isVis[nx][ny] = true;
			}
		}
		
	}
	static class State implements Comparable<State>{
		int x;
		int y;
		String s;
		int step;
		public State(int x, int y, String s, int step) {
			this.x = x;
			this.y = y;
			this.s = s;
			this.step = step;
		}
		@Override
		public int compareTo(State o) {
			if(this.step == o.step) {
				char[] this_s = this.s.toCharArray();
				char[] o_s = o.s.toCharArray();
				int len = Math.min(this_s.length, o_s.length);
				for (int i = 0; i < len; i++) {
					if(this_s[i] != o_s[i])
						return this_s[i] - o_s[i];
				}
				return this_s.length-o_s.length;
			}
			return this.step - o.step;
		}
	}
}
